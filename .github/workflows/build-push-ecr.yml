name: Build and Push to ECR

'on':
  push:
    branches: [stacklok-main]
    paths:
      - 'backend/Dockerfile'
      - 'backend/Dockerfile.model_server'
      - 'deployment/helm/charts/onyx/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 781189302813.dkr.ecr.us-east-1.amazonaws.com

permissions:
  contents: read
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add vespa https://onyx-dot-app.github.io/vespa-helm-charts
          helm repo update

      - name: Set versions
        id: versions
        run: |
          echo "Searching for version in values.yaml..."
          cat deployment/helm/charts/onyx/values.yaml
          echo "Extracting version..."
          VERSION=$(yq -r '.image.tag // ""' deployment/helm/charts/onyx/values.yaml)
          echo "Extracted version: '$VERSION'"
          if [ -z "$VERSION" ]; then
            echo "No version found, using default"
            VERSION="0.1.0"
          else
            # Remove 'v' prefix if present
            VERSION=${VERSION#v}
            echo "Version after removing potential 'v' prefix: $VERSION"
          fi
          # Validate version format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Using default version"
            VERSION="0.1.0"
          fi
          echo "Final version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          # Extract subchart versions
          echo "Extracting subchart versions from Chart.yaml..."
          MINIO_VERSION=$(yq -r '.dependencies[] | select(.name == "minio") | .version' deployment/helm/charts/onyx/Chart.yaml)
          NGINX_VERSION=$(yq -r '.dependencies[] | select(.name == "nginx") | .version' deployment/helm/charts/onyx/Chart.yaml)
          POSTGRESQL_VERSION=$(yq -r '.dependencies[] | select(.name == "postgresql") | .version' deployment/helm/charts/onyx/Chart.yaml)
          REDIS_VERSION=$(yq -r '.dependencies[] | select(.name == "redis") | .version' deployment/helm/charts/onyx/Chart.yaml)
          VESPA_VERSION=$(yq -r '.annotations.images' deployment/helm/charts/onyx/Chart.yaml | yq -r '.[] | select(.name == "vespa") | .image' - | cut -d':' -f2)

          echo "minio_version=$MINIO_VERSION" >> "$GITHUB_OUTPUT"
          echo "nginx_version=$NGINX_VERSION" >> "$GITHUB_OUTPUT"
          echo "postgresql_version=$POSTGRESQL_VERSION" >> "$GITHUB_OUTPUT"
          echo "redis_version=$REDIS_VERSION" >> "$GITHUB_OUTPUT"
          echo "vespa_version=$VESPA_VERSION" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::781189302813:role/github-actions-research
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repositories
        run: |
          # Create repositories if they don't exist
          aws ecr describe-repositories --repository-names onyx || aws ecr create-repository --repository-name onyx
          aws ecr describe-repositories --repository-names onyx-model-server || aws ecr create-repository --repository-name onyx-model-server
          aws ecr describe-repositories --repository-names minio || aws ecr create-repository --repository-name minio
          aws ecr describe-repositories --repository-names nginx || aws ecr create-repository --repository-name nginx
          aws ecr describe-repositories --repository-names postgresql || aws ecr create-repository --repository-name postgresql
          aws ecr describe-repositories --repository-names redis || aws ecr create-repository --repository-name redis
          aws ecr describe-repositories --repository-names vespa || aws ecr create-repository --repository-name vespa

          # Note: We don't need to create a separate repository for Helm charts
          # as they will be stored in the 'onyx' repository alongside the images

      # - name: Build and push Onyx backend image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./backend
      #     file: ./backend/Dockerfile
      #     push: true
      #     tags: >-
      #       ${{ env.ECR_REGISTRY }}/onyx:${{ steps.versions.outputs.version }}

      # - name: Build and push Onyx model server image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./backend
      #     file: ./backend/Dockerfile.model_server
      #     push: true
      #     tags: >-
      #       ${{ env.ECR_REGISTRY }}/onyx-model-server:${{ steps.versions.outputs.version }}

      # Pull and push subchart images
      - name: Pull and push MinIO image
        run: |
          docker pull bitnami/minio:${{ steps.versions.outputs.minio_version }}
          docker tag bitnami/minio:${{ steps.versions.outputs.minio_version }} ${{ env.ECR_REGISTRY }}/minio:${{ steps.versions.outputs.minio_version }}
          docker push ${{ env.ECR_REGISTRY }}/minio:${{ steps.versions.outputs.minio_version }}

      - name: Pull and push NGINX image
        run: |
          docker pull bitnami/nginx-ingress-controller:${{ steps.versions.outputs.nginx_version }}
          docker tag bitnami/nginx-ingress-controller:${{ steps.versions.outputs.nginx_version }} ${{ env.ECR_REGISTRY }}/nginx:${{ steps.versions.outputs.nginx_version }}
          docker push ${{ env.ECR_REGISTRY }}/nginx:${{ steps.versions.outputs.nginx_version }}

      - name: Pull and push PostgreSQL image
        run: |
          docker pull bitnami/postgresql:${{ steps.versions.outputs.postgresql_version }}
          docker tag bitnami/postgresql:${{ steps.versions.outputs.postgresql_version }} ${{ env.ECR_REGISTRY }}/postgresql:${{ steps.versions.outputs.postgresql_version }}
          docker push ${{ env.ECR_REGISTRY }}/postgresql:${{ steps.versions.outputs.postgresql_version }}

      - name: Pull and push Redis image
        run: |
          docker pull bitnami/redis:${{ steps.versions.outputs.redis_version }}
          docker tag bitnami/redis:${{ steps.versions.outputs.redis_version }} ${{ env.ECR_REGISTRY }}/redis:${{ steps.versions.outputs.redis_version }}
          docker push ${{ env.ECR_REGISTRY }}/redis:${{ steps.versions.outputs.redis_version }}

      - name: Pull and push Vespa image
        run: |
          docker pull vespaengine/vespa:${{ steps.versions.outputs.vespa_version }}
          docker tag vespaengine/vespa:${{ steps.versions.outputs.vespa_version }} ${{ env.ECR_REGISTRY }}/vespa:${{ steps.versions.outputs.vespa_version }}
          docker push ${{ env.ECR_REGISTRY }}/vespa:${{ steps.versions.outputs.vespa_version }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.3'

      - name: Package Helm Charts
        run: |
          # Debug: Show current directory
          pwd
          echo "Directory contents before packaging:"
          ls -la

          # Package Onyx chart
          echo "Packaging Onyx chart..."
          helm dependency update deployment/helm/charts/onyx
          helm package deployment/helm/charts/onyx
          
          # Verify Onyx chart was created
          if [ ! -f onyx-*.tgz ]; then
            echo "Error: Onyx chart package was not created"
            exit 1
          fi

          echo "Directory contents after packaging:"
          ls -la *.tgz

      - name: Push Helm Charts to ECR
        run: |
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            helm registry login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

          # Push Onyx chart
          echo "Pushing Onyx chart..."
          ONYX_CHART=$(ls onyx-[0-9]*.tgz 2>/dev/null || true)
          if [ -z "$ONYX_CHART" ]; then
            echo "Error: Onyx chart package not found in root directory"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          echo "Found chart: $ONYX_CHART"
          helm push "$ONYX_CHART" "oci://${{ env.ECR_REGISTRY }}/onyx"
