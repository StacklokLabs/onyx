name: Pull and Push Third Party Images to ECR

'on':
  push:
    branches: [stacklok-main, main]
    paths:
      - 'deployment/helm/charts/onyx/Chart.yaml'
      - 'deployment/helm/charts/onyx/values.yaml'
      - 'deployment/helm/charts/onyx/stacklok_values.yaml'
      - '.github/workflows/pull-push-third-party-images.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 781189302813.dkr.ecr.us-east-1.amazonaws.com

permissions:
  contents: read
  id-token: write

jobs:
  pull-and-push-third-party-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Set subchart versions
        id: versions
        run: |
          # Extract subchart versions
          echo "Extracting subchart versions from Chart.yaml..."
          MINIO_VERSION=$(yq -r '.dependencies[] | select(.name == "minio") | .version' deployment/helm/charts/onyx/Chart.yaml)
          NGINX_VERSION=$(yq -r '.dependencies[] | select(.name == "nginx") | .version' deployment/helm/charts/onyx/Chart.yaml)
          POSTGRESQL_VERSION=$(yq -r '.dependencies[] | select(.name == "postgresql") | .version' deployment/helm/charts/onyx/Chart.yaml)
          REDIS_VERSION=$(yq -r '.dependencies[] | select(.name == "redis") | .version' deployment/helm/charts/onyx/Chart.yaml)
          VESPA_VERSION=$(yq -r '.annotations.images' deployment/helm/charts/onyx/Chart.yaml | yq -r '.[] | select(.name == "vespa") | .image' - | cut -d':' -f2)

          echo "minio_version=$MINIO_VERSION" >> "$GITHUB_OUTPUT"
          echo "nginx_version=$NGINX_VERSION" >> "$GITHUB_OUTPUT"
          echo "postgresql_version=$POSTGRESQL_VERSION" >> "$GITHUB_OUTPUT"
          echo "redis_version=$REDIS_VERSION" >> "$GITHUB_OUTPUT"
          echo "vespa_version=$VESPA_VERSION" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::781189302813:role/github-actions-research
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Free disk space
        run: |
          # Display initial disk space
          df -h
          
          # Remove unnecessary large directories
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          
          # Clean Docker system
          docker system prune -af
          
          # Display disk space after cleanup
          df -h

      - name: Create ECR repositories for third party images
        run: |
          # Create repositories if they don't exist
          aws ecr describe-repositories --repository-names minio || aws ecr create-repository --repository-name minio
          aws ecr describe-repositories --repository-names nginx || aws ecr create-repository --repository-name nginx
          aws ecr describe-repositories --repository-names postgresql || aws ecr create-repository --repository-name postgresql
          aws ecr describe-repositories --repository-names redis || aws ecr create-repository --repository-name redis
          aws ecr describe-repositories --repository-names vespa || aws ecr create-repository --repository-name vespa

      - name: Pull and push MinIO image
        run: |
          MINIO_IMAGE_VERSION=$(yq -r '.minio.image.tag // ""' deployment/helm/charts/onyx/values.yaml)
          if [ -z "$MINIO_IMAGE_VERSION" ]; then
            MINIO_IMAGE_VERSION=$(yq -r '.minio.image.tag // "latest"' deployment/helm/charts/onyx/stacklok_values.yaml)
          fi
          docker pull --platform linux/amd64 bitnami/minio:${MINIO_IMAGE_VERSION}
          docker pull --platform linux/arm64 bitnami/minio:${MINIO_IMAGE_VERSION}
          docker tag bitnami/minio:${MINIO_IMAGE_VERSION} ${{ env.ECR_REGISTRY }}/minio:${{ steps.versions.outputs.minio_version }}-amd64
          docker tag bitnami/minio:${MINIO_IMAGE_VERSION} ${{ env.ECR_REGISTRY }}/minio:${{ steps.versions.outputs.minio_version }}-arm64
          docker push ${{ env.ECR_REGISTRY }}/minio:${{ steps.versions.outputs.minio_version }}-amd64
          docker push ${{ env.ECR_REGISTRY }}/minio:${{ steps.versions.outputs.minio_version }}-arm64
          docker manifest create ${{ env.ECR_REGISTRY }}/minio:${{ steps.versions.outputs.minio_version }} \
            ${{ env.ECR_REGISTRY }}/minio:${{ steps.versions.outputs.minio_version }}-arm64 \
            ${{ env.ECR_REGISTRY }}/minio:${{ steps.versions.outputs.minio_version }}-amd64
          docker manifest push ${{ env.ECR_REGISTRY }}/minio:${{ steps.versions.outputs.minio_version }}

      - name: Pull and push NGINX image
        run: |
          NGINX_IMAGE_VERSION=$(yq -r '.nginx.image.tag // ""' deployment/helm/charts/onyx/values.yaml)
          if [ -z "$NGINX_IMAGE_VERSION" ]; then
            NGINX_IMAGE_VERSION=$(yq -r '.nginx.image.tag // "latest"' deployment/helm/charts/onyx/stacklok_values.yaml)
          fi
          docker pull --platform linux/amd64 bitnami/nginx-ingress-controller:${NGINX_IMAGE_VERSION}
          docker pull --platform linux/arm64 bitnami/nginx-ingress-controller:${NGINX_IMAGE_VERSION}
          docker tag bitnami/nginx-ingress-controller:${NGINX_IMAGE_VERSION} ${{ env.ECR_REGISTRY }}/nginx:${{ steps.versions.outputs.nginx_version }}-amd64
          docker tag bitnami/nginx-ingress-controller:${NGINX_IMAGE_VERSION} ${{ env.ECR_REGISTRY }}/nginx:${{ steps.versions.outputs.nginx_version }}-arm64
          docker push ${{ env.ECR_REGISTRY }}/nginx:${{ steps.versions.outputs.nginx_version }}-amd64
          docker push ${{ env.ECR_REGISTRY }}/nginx:${{ steps.versions.outputs.nginx_version }}-arm64
          docker manifest create ${{ env.ECR_REGISTRY }}/nginx:${{ steps.versions.outputs.nginx_version }} \
            ${{ env.ECR_REGISTRY }}/nginx:${{ steps.versions.outputs.nginx_version }}-arm64 \
            ${{ env.ECR_REGISTRY }}/nginx:${{ steps.versions.outputs.nginx_version }}-amd64
          docker manifest push ${{ env.ECR_REGISTRY }}/nginx:${{ steps.versions.outputs.nginx_version }}

      - name: Pull and push PostgreSQL image
        run: |
          POSTGRESQL_IMAGE_VERSION=$(yq -r '.postgresql.image.tag // ""' deployment/helm/charts/onyx/values.yaml)
          if [ -z "$POSTGRESQL_IMAGE_VERSION" ]; then
            POSTGRESQL_IMAGE_VERSION=$(yq -r '.postgresql.image.tag // "latest"' deployment/helm/charts/onyx/stacklok_values.yaml)
          fi
          docker pull --platform linux/amd64 bitnami/postgresql:${POSTGRESQL_IMAGE_VERSION}
          docker pull --platform linux/arm64 bitnami/postgresql:${POSTGRESQL_IMAGE_VERSION}
          docker tag bitnami/postgresql:${POSTGRESQL_IMAGE_VERSION} ${{ env.ECR_REGISTRY }}/postgresql:${{ steps.versions.outputs.postgresql_version }}-amd64
          docker tag bitnami/postgresql:${POSTGRESQL_IMAGE_VERSION} ${{ env.ECR_REGISTRY }}/postgresql:${{ steps.versions.outputs.postgresql_version }}-arm64
          docker push ${{ env.ECR_REGISTRY }}/postgresql:${{ steps.versions.outputs.postgresql_version }}-amd64
          docker push ${{ env.ECR_REGISTRY }}/postgresql:${{ steps.versions.outputs.postgresql_version }}-arm64
          docker manifest create ${{ env.ECR_REGISTRY }}/postgresql:${{ steps.versions.outputs.postgresql_version }} \
            ${{ env.ECR_REGISTRY }}/postgresql:${{ steps.versions.outputs.postgresql_version }}-arm64 \
            ${{ env.ECR_REGISTRY }}/postgresql:${{ steps.versions.outputs.postgresql_version }}-amd64
          docker manifest push ${{ env.ECR_REGISTRY }}/postgresql:${{ steps.versions.outputs.postgresql_version }}

      - name: Pull and push Redis image
        run: |
          REDIS_IMAGE_VERSION=$(yq -r '.redis.image.tag // ""' deployment/helm/charts/onyx/values.yaml)
          if [ -z "$REDIS_IMAGE_VERSION" ]; then
            REDIS_IMAGE_VERSION=$(yq -r '.redis.image.tag // "latest"' deployment/helm/charts/onyx/stacklok_values.yaml)
          fi
          docker pull --platform linux/amd64 bitnami/redis:${REDIS_IMAGE_VERSION}
          docker pull --platform linux/arm64 bitnami/redis:${REDIS_IMAGE_VERSION}
          docker tag bitnami/redis:${REDIS_IMAGE_VERSION} ${{ env.ECR_REGISTRY }}/redis:${{ steps.versions.outputs.redis_version }}-amd64
          docker tag bitnami/redis:${REDIS_IMAGE_VERSION} ${{ env.ECR_REGISTRY }}/redis:${{ steps.versions.outputs.redis_version }}-arm64
          docker push ${{ env.ECR_REGISTRY }}/redis:${{ steps.versions.outputs.redis_version }}-amd64
          docker push ${{ env.ECR_REGISTRY }}/redis:${{ steps.versions.outputs.redis_version }}-arm64
          docker manifest create ${{ env.ECR_REGISTRY }}/redis:${{ steps.versions.outputs.redis_version }} \
            ${{ env.ECR_REGISTRY }}/redis:${{ steps.versions.outputs.redis_version }}-arm64 \
            ${{ env.ECR_REGISTRY }}/redis:${{ steps.versions.outputs.redis_version }}-amd64
          docker manifest push ${{ env.ECR_REGISTRY }}/redis:${{ steps.versions.outputs.redis_version }}

      - name: Pull and push Vespa image
        run: |
          docker pull --platform linux/amd64 vespaengine/vespa:${{ steps.versions.outputs.vespa_version }}
          docker pull --platform linux/arm64 vespaengine/vespa:${{ steps.versions.outputs.vespa_version }}
          docker tag vespaengine/vespa:${{ steps.versions.outputs.vespa_version }} ${{ env.ECR_REGISTRY }}/vespa:${{ steps.versions.outputs.vespa_version }}-amd64
          docker tag vespaengine/vespa:${{ steps.versions.outputs.vespa_version }} ${{ env.ECR_REGISTRY }}/vespa:${{ steps.versions.outputs.vespa_version }}-arm64
          docker push ${{ env.ECR_REGISTRY }}/vespa:${{ steps.versions.outputs.vespa_version }}-amd64
          docker push ${{ env.ECR_REGISTRY }}/vespa:${{ steps.versions.outputs.vespa_version }}-arm64
          docker manifest create ${{ env.ECR_REGISTRY }}/vespa:${{ steps.versions.outputs.vespa_version }} \
            ${{ env.ECR_REGISTRY }}/vespa:${{ steps.versions.outputs.vespa_version }}-arm64 \
            ${{ env.ECR_REGISTRY }}/vespa:${{ steps.versions.outputs.vespa_version }}-amd64
          docker manifest push ${{ env.ECR_REGISTRY }}/vespa:${{ steps.versions.outputs.vespa_version }}
